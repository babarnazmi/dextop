Remote Instantiation Demo
===============================

This demo shows how to instantiate a remote object on the server-side.

### Server side

Use *[DextopRemotable]* attributes to mark a remotable constructor.
Alternatively *[DextopRemotableConstructor(alias="...")]* can be used 
to specify an alias for the constructor.

### Client side

Use 

	this.remote.Instantiate(type, params, callback)

to instantiate object on the server-side and get it's client-side configuration.

The *type* argument can be a string name or a JS hash containing additional parameters required for remote object registration.

	{
		type: '...',
		own: true, //Dispose remote object when its parent is disposed
		subRemote: true, //for client side first remote objects
		remteId: ..., //for client side first remote objects
	}

NOTE: Dextop windows should be instantiated with *own:false* as it will be automatically disposed when closed.

*params* argument contains the data which will be passed to the class constructor (on the server-side).
It can be a *null* value, an *array* or a *hash*.

Default constructors are prefered if *null* value is sent from the client side.

For multiple parameter constructors, arguments are decoded from a hash or from an array, e.g.

		[DextopRemotableConstructor(alias="chat")]
        ChatSession(string a, string b) 
		
		//use 
		this.remote.Instantiate('chat', { a: 'Nick', b: 'John'}, ...);    
		//or
		this.remote.Instantiate('chat', ['Nick', 'John'], ...);    

### Hash constructors

Hash constructors have only one argument of type *DextopConfig*, like the one below:

	[DextopRemotable]
	public RemoteInstantiationWindow(DextopConfig dc) {...}

Hash constructors have higher priority, and they will be invoked any time a hash is sent from the client side.
If there are other constructors, beside hash constructor, they can be invoked only by specifing an array on the client side.
